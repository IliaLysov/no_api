version: '3.8'

services:
  kafka:
    image: bitnami/kafka:3.9
    ports:
      - '9092:9092'
      - '9094:9094'
    environment:
      KAFKA_CFG_NODE_ID: 0
      KAFKA_CFG_PROCESS_ROLES: 'controller,broker'
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: '0@kafka:9093'
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: 'false'
      KAFKA_CFG_LISTENERS: 'PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094'
      KAFKA_CFG_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka:9092,EXTERNAL://localhost:9094'
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT'
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server kafka:9092 --list > /dev/null 2>&1"]
      interval: 5s
      timeout: 5s
      retries: 20

  kafka-init:
    image: bitnami/kafka:3.9
    command:
      kafka-topics.sh --create --bootstrap-server kafka:9092 --topic auth-topic
    depends_on:
      kafka:
        condition: service_healthy
  db:
    image: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 1234
      POSTGRES_DB: postgres
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d postgres"]
      interval: 5s
      timeout: 5s
      retries: 10
  migrator:
    image: migrate/migrate:4
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./migration:/migrations:ro
    command: [
      "-database", "postgres://postgres:1234@db:5432/postgres?sslmode=disable",
      "-source",  "file:///migrations/postgres/auth",
      "-verbose",
      "up"
    ]
    restart: "no"
  app:
    build:
      context: .
      dockerfile: Dockerfile.app
    env_file:
      - .env.compose
    depends_on:
      db:
        condition: service_healthy
      kafka-init:
        condition: service_completed_successfully
    ports:
      - "8080:8080"
  notify:
    build:
      context: .
      dockerfile: Dockerfile.notify
    env_file:
      - .env.compose
    depends_on:
      kafka-init:
        condition: service_completed_successfully

volumes:
  pgdata: {}